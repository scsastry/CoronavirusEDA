})
# stop the app when we close it
session$onSessionEnded(stopApp)
}
shinyApp(ui, server)
knitr::opts_chunk$set(echo = TRUE)
UC_admit <- readr::read_csv("data/UC_admit.csv")
UC_admit
colnames(UC_admit)
str(UC_admit)
colnames(UC_admit)
str(UC_admit)
dim(UC_admit)
is.na(UC_admit)
UC_admit %>%
summarize(na_count = sum(is.na(UC_admit)))
UC_admit %>%
purrr::map_df(~ sum(is.na(.)))
which(is.na(UC_admit))
which(is.na(UC_admit$`Perc FR`))
which(is.na(UC_admit$FilteredCountFR))
UC_admit[1177,]
ui <- dashboardPage(
dashboardHeader(title = "Plot Iris App"),
dashboardSidebar(),
dashboardBody(
fluidRow(
box(title = "Plot Options", width = 3,
selectInput("x", "Select X Variable", choices = c("Sepal.Length", "Sepal.Width", "Petal.Length", "Petal.Width"),
selected = "Petal.Width"),
selectInput("y", "Select Y Variable", choices = c("Sepal.Length", "Sepal.Width", "Petal.Length", "Petal.Width"),
selected = "Petal.Length"),
sliderInput("pointsize", "Select the Point Size", min = 1, max = 5, value = 2, step = 0.5)
), # close the first box
box(title = "Plot of Iris Data", width = 7,
plotOutput("plot", width = "600px", height = "500px")
) # close the second box
) # close the row
) # close the dashboard body
) # close the ui
server <- function(input, output, session) {
# the code to make the plot of iris data grouped by species
output$plot <- renderPlot({
ggplot(iris, aes_string(x = input$x, y = input$y, col = "Species")) + geom_point(size=input$pointsize) + theme_light(base_size = 18)
})
# stop the app when we close it
session$onSessionEnded(stopApp)
}
shinyApp(ui, server)
ui <- dashboardPage(
dashboardHeader(title = "UC Campus Diversity"),
dashboardSidebar(),
dashboardBody(
fluidRow(
box(title = "Plot Options", width = 3,
selectInput("x", "Select X Variable", choices = c("Academic_Yr", "Campus", "Category"),
selected = "Campus"),
selectInput("y", "Select Y Variable", choices = c("Ethnicity"),
selected = "Ethnicity"),
sliderInput("Academic_Yr", "Select the Point Size", min = 2018, max = 2019, value = 2010, step = 1)
), # close the first box
box(title = "Plot of UC Diversity", width = 7,
plotOutput("plot", width = "600px", height = "500px")
) # close the second box
) # close the row
) # close the dashboard body
) # close the ui
server <- function(input, output, session) {
# the code to make the plot of iris data grouped by species
output$plot <- renderPlot({
ggplot(UC_admit, aes_string(x = input$x, y = input$y, col = "Ethnicity")) + geom_point(size=input$pointsize) + theme_light(base_size = 18)
})
# stop the app when we close it
session$onSessionEnded(stopApp)
}
shinyApp(ui, server)
ui <- dashboardPage(
dashboardHeader(title = "UC Campus Diversity"),
dashboardSidebar(),
dashboardBody(
fluidRow(
box(title = "Plot Options", width = 3,
selectInput("x", "Select X Variable", choices = c("Academic_Yr", "Campus", "Category"),
selected = "Campus"),
selectInput("y", "Select Y Variable", choices = c("Ethnicity"),
selected = "Ethnicity"),
sliderInput("Academic_Yr", "Select the Point Size", min = 2010, max = 2019, value = 2010, step = 1)
), # close the first box
box(title = "Plot of UC Diversity", width = 7,
plotOutput("plot", width = "600px", height = "500px")
) # close the second box
) # close the row
) # close the dashboard body
) # close the ui
server <- function(input, output, session) {
# the code to make the plot of iris data grouped by species
output$plot <- renderPlot({
ggplot(UC_admit, aes_string(x = input$x, y = input$y, col = "Ethnicity")) + geom_point(size=input$pointsize) + theme_light(base_size = 18)
})
# stop the app when we close it
session$onSessionEnded(stopApp)
}
shinyApp(ui, server)
ui <- dashboardPage(
dashboardHeader(title = "UC Campus Diversity"),
dashboardSidebar(),
dashboardBody(
fluidRow(
box(title = "Plot Options", width = 3,
selectInput("x", "Select X Variable", choices = c("Academic_Yr", "Campus", "Category"),
selected = "Campus"),
selectInput("y", "Select Y Variable", choices = c("Ethnicity"),
selected = "Ethnicity"),
sliderInput("Academic_Yr", "Select the Point Size", min = 2010, max = 2019, value = 2010, step = 1)
), # close the first box
box(title = "Plot of UC Diversity", width = 10,
plotOutput("plot", width = "600px", height = "500px")
) # close the second box
) # close the row
) # close the dashboard body
) # close the ui
server <- function(input, output, session) {
# the code to make the plot of iris data grouped by species
output$plot <- renderPlot({
ggplot(UC_admit, aes_string(x = input$x, y = input$y, col = "Ethnicity")) + geom_point() + theme_light(base_size = 18)
})
# stop the app when we close it
session$onSessionEnded(stopApp)
}
shinyApp(ui, server)
knitr::opts_chunk$set(echo = TRUE)
#install.packages("shiny")
library(shiny)
library(shiny)
library(shinydashboard)
UC_admit <- readr::read_csv("data/UC_admit.csv")
UC_admit
colnames(UC_admit)
str(UC_admit)
dim(UC_admit)
UC_admit %>%
purrr::map_df(~ sum(is.na(.)))
which(is.na(UC_admit$`Perc FR`))
which(is.na(UC_admit$FilteredCountFR))
UC_admit[1177,]
ui <- dashboardPage(
dashboardHeader(title = "UC Campus Diversity"),
dashboardSidebar(),
dashboardBody(
fluidRow(
box(title = "Plot Options", width = 3,
selectInput("x", "Select X Variable", choices = c("Academic_Yr", "Campus", "Category"),
selected = "Campus"),
selectInput("y", "Select Y Variable", choices = c("Ethnicity"),
selected = "Ethnicity"),
sliderInput("Academic_Yr", "Select the Point Size", min = 2010, max = 2019, value = 2010, step = 1)
), # close the first box
box(title = "Plot of UC Diversity", width = 10,
plotOutput("plot", width = "600px", height = "500px")
) # close the second box
) # close the row
) # close the dashboard body
) # close the ui
server <- function(input, output, session) {
# the code to make the plot of iris data grouped by species
output$plot <- renderPlot({
ggplot(UC_admit, aes_string(x = input$x, y = input$y, col = "Ethnicity")) + geom_point() + theme_light(base_size = 18)
})
# stop the app when we close it
session$onSessionEnded(stopApp)
}
shinyApp(ui, server)
ui <- dashboardPage(
dashboardHeader(title = "UC Campus Diversity"),
dashboardSidebar(),
dashboardBody(
fluidRow(
box(title = "Plot Options", width = 3,
selectInput("x", "Select X Variable", choices = c("Academic_Yr", "Campus", "Category"),
selected = "Campus"),
selectInput("y", "Select Y Variable", choices = c("Ethnicity"),
selected = "Ethnicity"),
sliderInput("Academic_Yr", "Select the Point Size", min = 2010, max = 2019, value = 2010, step = 1)
), # close the first box
box(title = "Plot of UC Diversity", width = 10,
plotOutput("plot", width = "600px", height = "500px")
) # close the second box
) # close the row
) # close the dashboard body
) # close the ui
server <- function(input, output, session) {
# the code to make the plot of iris data grouped by species
output$plot <- renderPlot({
ggplot(UC_admit, aes_string(x = input$x, y = input$y, col = "Ethnicity")) + geom_point() + theme_light(base_size = 18)
})
# stop the app when we close it
session$onSessionEnded(stopApp)
}
shinyApp(ui, server)
UC_admit$Campus <- as.factor(UC_admit$Campus)
UC_admit$Category <- as.factor(UC_admit$Category)
UC_admit$Ethnicity <- as.factor(UC_admit$Ethnicity)
View(UC_admit)
ui <- dashboardPage(
dashboardHeader(title = "UC Campus Diversity Dashboard"),
dashboardSidebar(),
dashboardBody(
fluidRow(
box(title = "Plot Options", width = 10,
selectInput("x", "Select Variable", choices = c("Campus", "Category"),
selected = "Campus"),
sliderInput("Academic_Yr", "Select the Point Size", min = 2010, max = 2019, value = 2010, step = 1)
),
box(title = "Plot of UC Diversity", width = 10,
plotOutput("plot", width = "600px", height = "500px")
)
)
)
)
server <- function(input, output, session) {
output$plot <- renderPlot({
ggplot(UC_admit, aes_string(x = input$x, y = input$y, col = "Ethnicity")) + geom_point() + theme_light(base_size = 18)
})
# stop the app when we close it
session$onSessionEnded(stopApp)
}
shinyApp(ui, server)
ui <- dashboardPage(
dashboardHeader(title = "UC Campus Diversity Dashboard"),
dashboardSidebar(),
dashboardBody(
fluidRow(
box(title = "Plot Options", width = 10,
selectInput("x", "Select Variable", choices = c("Campus", "Category"),
selected = "Campus"),
sliderInput("Academic_Yr", "Select the Point Size", min = 2010, max = 2019, value = 2010, step = 1)
),
box(title = "Plot of UC Diversity", width = 10,
plotOutput("plot", width = "600px", height = "500px")
)
)
)
)
server <- function(input, output, session) {
output$plot <- renderPlot({
ggplot(UC_admit, aes_string(x = "Ethnicity", y = "FilteredCountFR", fill = input$fill)) + geom_col(position = "dodge") + theme_light(base_size = 18)+
coord_flip()
})
# stop the app when we close it
session$onSessionEnded(stopApp)
}
shinyApp(ui, server)
ui <- dashboardPage(
dashboardHeader(title = "UC Campus Diversity Dashboard"),
dashboardSidebar(),
dashboardBody(
fluidRow(
box(title = "Plot Options", width = 10,
selectInput("x", "Select Variable", choices = c("Campus", "Category"),
selected = "Campus"),
sliderInput("Academic_Yr", "Select Academic Year", min = 2010, max = 2019, value = 2010, step = 1)
),
box(title = "Plot of UC Diversity", width = 10,
plotOutput("plot", width = "600px", height = "500px")
)
)
)
)
server <- function(input, output, session) {
output$plot <- renderPlot({
ggplot(UC_admit, aes_string(x = input$x, y = "FilteredCountFR", fill = "Ethnicity" )) + geom_col(position = "dodge") + theme_light(base_size = 18)+
coord_flip()
})
# stop the app when we close it
session$onSessionEnded(stopApp)
}
shinyApp(ui, server)
ui <- dashboardPage(
dashboardHeader(title = "UC Campus Diversity Dashboard"),
dashboardSidebar(),
dashboardBody(
fluidRow(
box(title = "Plot Options", width = 10,
selectInput("x", "Select Variable", choices = c("Academic_Yr","Campus", "Category"),
selected = "Campus"),
sliderInput("Academic_Yr", "Select Academic Year", min = 2010, max = 2019, value = 2010, step = 1)
),
box(title = "Plot of UC Diversity", width = 10,
plotOutput("plot", width = "600px", height = "500px")
)
)
)
)
server <- function(input, output, session) {
output$plot <- renderPlot({
ggplot(UC_admit, aes_string(x = input$x, y = "FilteredCountFR", fill = "Ethnicity" )) + geom_col(position = "dodge") + theme_light(base_size = 18)+
coord_flip()
})
# stop the app when we close it
session$onSessionEnded(stopApp)
}
shinyApp(ui, server)
ui <- dashboardPage(
dashboardHeader(title = "UC Campus Diversity Dashboard"),
dashboardSidebar(),
dashboardBody(
fluidRow(
box(title = "Plot Options", width = 10,
selectInput("x", "Select Variable", choices = c("Campus", "Category"),
selected = "Campus"),
sliderInput("Academic_Yr", "Select Academic Year", choices = c("2010", "2011", "2012", "2013", "2014", "2015", "2016", "2017", "2018", "2019")
),
box(title = "Plot of UC Diversity", width = 10,
plotOutput("plot", width = "600px", height = "500px")
)
)
)
))
ui <- dashboardPage(
dashboardHeader(title = "UC Campus Diversity Dashboard"),
dashboardSidebar(),
dashboardBody(
fluidRow(
box(title = "Plot Options", width = 10,
selectInput("x", "Select Variable", choices = c("Campus", "Category"),
selected = "Campus"),
sliderInput("Academic_Yr", "Select Academic Year", min = 0, max = 2019, value = 2019, step = 1)
),
box(title = "Plot of UC Diversity", width = 10,
plotOutput("plot", width = "600px", height = "500px")
)
)
)
)
server <- function(input, output, session) {
output$plot <- renderPlot({
ggplot(UC_admit, aes_string(x = input$x, y = "Academic_Yr", fill = "Ethnicity" )) + geom_col(position = "dodge") + theme_light(base_size = 18)+
coord_flip()
})
# stop the app when we close it
session$onSessionEnded(stopApp)
}
shinyApp(ui, server)
ui <- dashboardPage(
dashboardHeader(title = "UC Campus Diversity Dashboard"),
dashboardSidebar(),
dashboardBody(
fluidRow(
box(title = "Plot Options", width = 10,
selectInput("x", "Select Variable", choices = c("Campus", "Category"),
selected = "Campus"),
sliderInput("Academic_Yr", "Select Academic Year", min = 2010, max = 2019, value = 2019, step = 1)
),
box(title = "Plot of UC Diversity", width = 10,
plotOutput("plot", width = "600px", height = "500px")
)
)
)
)
server <- function(input, output, session) {
output$plot <- renderPlot({
ggplot(UC_admit, aes_string(x = input$x, y = "FilteredCountFR", fill = "Ethnicity" )) + geom_col(position = "dodge") + theme_light(base_size = 18)+
coord_flip()
})
# stop the app when we close it
session$onSessionEnded(stopApp)
}
shinyApp(ui, server)
ui <- dashboardPage(
dashboardHeader(title = "UC Campus Enrollment Dashboard"),
dashboardSidebar(),
dashboardBody(
fluidRow(
box(title = "Plot Options", width = 10,
selectInput("x", "Select Variable", choices = c("Ethnicity","Campus", "Category"),
selected = "Ethnicity"),
sliderInput("Academic_Yr", "Select Academic Year", min = 2010, max = 2019, value = 2019, step = 1)
),
box(title = "Plot of UC Enrollment", width = 10,
plotOutput("plot", width = "600px", height = "500px")
)
)
)
)
server <- function(input, output, session) {
output$plot <- renderPlot({
ggplot(UC_admit, aes_string(x = "Academic_Yr", y = "FilteredCountFR", fill = input$x )) + geom_col(position = "dodge") + theme_light(base_size = 18)+
coord_flip()
})
# stop the app when we close it
session$onSessionEnded(stopApp)
}
shinyApp(ui, server)
UC_admit$Campus <- as.factor(UC_admit$Campus)
UC_admit$Category <- as.factor(UC_admit$Category)
UC_admit$Ethnicity <- as.factor(UC_admit$Ethnicity)
ui <- dashboardPage(
dashboardHeader(title = "UC Campus Diversity Dashboard"),
dashboardSidebar(),
dashboardBody(
fluidRow(
box(title = "Plot Options", width = 10,
selectInput("x", "Select Variable", choices = c("Campus", "Category"),
selected = "Campus"),
sliderInput("Academic_Yr", "Select Academic Year", min = 2010, max = 2019, value = 2019, step = 1)
),
box(title = "Plot of UC Diversity", width = 10,
plotOutput("plot", width = "600px", height = "500px")
)
)
)
)
server <- function(input, output, session) {
output$plot <- renderPlot({
ggplot(UC_admit, aes_string(x = input$x, y = "FilteredCountFR", fill = "Ethnicity" )) + geom_col(position = "dodge") + theme_light(base_size = 18)+
coord_flip()
})
# stop the app when we close it
session$onSessionEnded(stopApp)
}
shinyApp(ui, server)
UC_admit %>%
purrr::map_df(~ sum(is.na(.)))
knitr::opts_chunk$set(echo = TRUE)
install.packages("flexdashboard")
install.packages("flexdashboard")
# install.packages("tidyverse")
# install.packages("naniar")
# install.packages("skimr")
# install.packages("visdat")
# install.packages("devtools")
# install.packages("rgeos")
# install.packages("rgdal")
# devtools::install_github("dkahle/ggmap")
# install.packages("shiny")
install.packages("DT")
install.packages("rpivotTable")
install.packages("plotly")
install.packages("openintro")
install.packages("highcharacter")
library(shiny)
library(shinydashboard)
library(devtools)
library(visdat)
library(tidyverse)
library(naniar)
library(skimr)
library(ggmap)
library(rgeos)
library(rgdal)
install.packages("DT")
install.packages("rpivotTable")
install.packages("plotly")
install.packages("openintro")
install.packages("highcharacter")
library(flexdashboard)
library(knitr)
library(shiny)
library(shinydashboard)
library(devtools)
library(visdat)
library(tidyverse)
library(naniar)
library(skimr)
library(ggmap)
library(rgeos)
library(rgdal)
library(DT)
library(rpivotTable)
library(ggplot2)
library(plotly)
library(openintro)
ibrary(highcharacter)
library(highcharacter)
https://cran.rstudio.com/bin/windows/Rtools/
library(flexdashboard)
library(knitr)
library(shiny)
library(shinydashboard)
library(devtools)
library(visdat)
library(tidyverse)
library(naniar)
library(skimr)
library(ggmap)
library(rgeos)
library(rgdal)
library(DT)
library(rpivotTable)
install.packages("DT")
install.packages("rpivotTable")
install.packages("DT")
library(flexdashboard)
library(knitr)
library(shiny)
library(shinydashboard)
library(devtools)
library(visdat)
library(tidyverse)
library(naniar)
library(skimr)
library(ggmap)
library(rgeos)
library(rgdal)
library(DT)
library(rpivotTable)
library(ggplot2)
library(plotly)
library(openintro)
knitr::opts_chunk$set(echo = TRUE)
install.packages("DT")
install.packages("rpivotTable")
